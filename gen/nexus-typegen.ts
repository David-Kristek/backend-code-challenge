/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphql/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PokemonInputType: { // input type
    classification: string; // String!
    evolutions?: NexusGenInputs['pokemonEvolutionInput'][] | null; // [pokemonEvolutionInput!]
    fleeRate: number; // Float!
    height: NexusGenInputs['minmaxvalInput']; // minmaxvalInput!
    id: string; // String!
    maxCP: number; // Int!
    maxHP: number; // Int!
    name: string; // String!
    types: string[]; // [String!]!
    weight: NexusGenInputs['minmaxvalInput']; // minmaxvalInput!
  }
  PokemonQueryInput: { // input type
    limit?: number | null; // Int
    offset?: number | null; // Int
    search?: string | null; // String
    types?: string[] | null; // [String!]
  }
  minmaxvalInput: { // input type
    maximum?: string | null; // String
    minimum?: string | null; // String
  }
  pokemonEvolutionInput: { // input type
    id: number; // Int!
    name?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Pokemon: { // root type
    classification?: string | null; // String
    evolutions?: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
    favorite?: boolean | null; // Boolean
    fleeRate?: number | null; // Float
    height?: NexusGenRootTypes['minmaxval'] | null; // minmaxval
    id?: number | null; // Int
    maxCP?: number | null; // Int
    maxHP?: number | null; // Int
    name?: string | null; // String
    types?: Array<NexusGenRootTypes['Type'] | null> | null; // [Type]
    weight?: NexusGenRootTypes['minmaxval'] | null; // minmaxval
  }
  Query: {};
  Type: { // root type
    type: string; // String!
  }
  minmaxval: { // root type
    maximum?: string | null; // String
    minimum?: string | null; // String
  }
  pokemonEvolution: { // root type
    id?: number | null; // Int
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    addPokemon: boolean; // Boolean!
    drop: boolean; // Boolean!
    likePokemon: boolean; // Boolean!
    test: boolean; // Boolean!
    unLikePokemon: boolean; // Boolean!
  }
  Pokemon: { // field return type
    classification: string | null; // String
    evolutions: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
    favorite: boolean | null; // Boolean
    fleeRate: number | null; // Float
    height: NexusGenRootTypes['minmaxval'] | null; // minmaxval
    id: number | null; // Int
    maxCP: number | null; // Int
    maxHP: number | null; // Int
    name: string | null; // String
    types: Array<NexusGenRootTypes['Type'] | null> | null; // [Type]
    weight: NexusGenRootTypes['minmaxval'] | null; // minmaxval
  }
  Query: { // field return type
    favoritePokemons: Array<NexusGenRootTypes['Pokemon'] | null>; // [Pokemon]!
    pokemonById: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    pokemons: Array<NexusGenRootTypes['Pokemon'] | null>; // [Pokemon]!
    types: Array<NexusGenRootTypes['Type'] | null>; // [Type]!
  }
  Type: { // field return type
    type: string; // String!
  }
  minmaxval: { // field return type
    maximum: string | null; // String
    minimum: string | null; // String
  }
  pokemonEvolution: { // field return type
    id: number | null; // Int
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    addPokemon: 'Boolean'
    drop: 'Boolean'
    likePokemon: 'Boolean'
    test: 'Boolean'
    unLikePokemon: 'Boolean'
  }
  Pokemon: { // field return type name
    classification: 'String'
    evolutions: 'Pokemon'
    favorite: 'Boolean'
    fleeRate: 'Float'
    height: 'minmaxval'
    id: 'Int'
    maxCP: 'Int'
    maxHP: 'Int'
    name: 'String'
    types: 'Type'
    weight: 'minmaxval'
  }
  Query: { // field return type name
    favoritePokemons: 'Pokemon'
    pokemonById: 'Pokemon'
    pokemons: 'Pokemon'
    types: 'Type'
  }
  Type: { // field return type name
    type: 'String'
  }
  minmaxval: { // field return type name
    maximum: 'String'
    minimum: 'String'
  }
  pokemonEvolution: { // field return type name
    id: 'Int'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addPokemon: { // args
      data: NexusGenInputs['PokemonInputType'][]; // [PokemonInputType!]!
    }
    likePokemon: { // args
      pokemonId: number; // Int!
    }
    unLikePokemon: { // args
      pokemonId: number; // Int!
    }
  }
  Query: {
    favoritePokemons: { // args
      query?: NexusGenInputs['PokemonQueryInput'] | null; // PokemonQueryInput
    }
    pokemonById: { // args
      id: number; // Int!
    }
    pokemons: { // args
      query?: NexusGenInputs['PokemonQueryInput'] | null; // PokemonQueryInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}